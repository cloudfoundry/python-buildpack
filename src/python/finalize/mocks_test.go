// Code generated by MockGen. DO NOT EDIT.
// Source: finalize.go

// Package finalize_test is a generated GoMock package.
package finalize_test

import (
	io "io"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockManifest is a mock of Manifest interface.
type MockManifest struct {
	ctrl     *gomock.Controller
	recorder *MockManifestMockRecorder
}

// MockManifestMockRecorder is the mock recorder for MockManifest.
type MockManifestMockRecorder struct {
	mock *MockManifest
}

// NewMockManifest creates a new mock instance.
func NewMockManifest(ctrl *gomock.Controller) *MockManifest {
	mock := &MockManifest{ctrl: ctrl}
	mock.recorder = &MockManifestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManifest) EXPECT() *MockManifestMockRecorder {
	return m.recorder
}

// RootDir mocks base method.
func (m *MockManifest) RootDir() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RootDir")
	ret0, _ := ret[0].(string)
	return ret0
}

// RootDir indicates an expected call of RootDir.
func (mr *MockManifestMockRecorder) RootDir() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RootDir", reflect.TypeOf((*MockManifest)(nil).RootDir))
}

// MockStager is a mock of Stager interface.
type MockStager struct {
	ctrl     *gomock.Controller
	recorder *MockStagerMockRecorder
}

// MockStagerMockRecorder is the mock recorder for MockStager.
type MockStagerMockRecorder struct {
	mock *MockStager
}

// NewMockStager creates a new mock instance.
func NewMockStager(ctrl *gomock.Controller) *MockStager {
	mock := &MockStager{ctrl: ctrl}
	mock.recorder = &MockStagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStager) EXPECT() *MockStagerMockRecorder {
	return m.recorder
}

// BuildDir mocks base method.
func (m *MockStager) BuildDir() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildDir")
	ret0, _ := ret[0].(string)
	return ret0
}

// BuildDir indicates an expected call of BuildDir.
func (mr *MockStagerMockRecorder) BuildDir() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildDir", reflect.TypeOf((*MockStager)(nil).BuildDir))
}

// DepDir mocks base method.
func (m *MockStager) DepDir() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DepDir")
	ret0, _ := ret[0].(string)
	return ret0
}

// DepDir indicates an expected call of DepDir.
func (mr *MockStagerMockRecorder) DepDir() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DepDir", reflect.TypeOf((*MockStager)(nil).DepDir))
}

// DepsIdx mocks base method.
func (m *MockStager) DepsIdx() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DepsIdx")
	ret0, _ := ret[0].(string)
	return ret0
}

// DepsIdx indicates an expected call of DepsIdx.
func (mr *MockStagerMockRecorder) DepsIdx() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DepsIdx", reflect.TypeOf((*MockStager)(nil).DepsIdx))
}

// WriteProfileD mocks base method.
func (m *MockStager) WriteProfileD(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteProfileD", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteProfileD indicates an expected call of WriteProfileD.
func (mr *MockStagerMockRecorder) WriteProfileD(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteProfileD", reflect.TypeOf((*MockStager)(nil).WriteProfileD), arg0, arg1)
}

// MockCommand is a mock of Command interface.
type MockCommand struct {
	ctrl     *gomock.Controller
	recorder *MockCommandMockRecorder
}

// MockCommandMockRecorder is the mock recorder for MockCommand.
type MockCommandMockRecorder struct {
	mock *MockCommand
}

// NewMockCommand creates a new mock instance.
func NewMockCommand(ctrl *gomock.Controller) *MockCommand {
	mock := &MockCommand{ctrl: ctrl}
	mock.recorder = &MockCommandMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommand) EXPECT() *MockCommandMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockCommand) Execute(arg0 string, arg1, arg2 io.Writer, arg3 string, arg4 ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2, arg3}
	for _, a := range arg4 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Execute", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockCommandMockRecorder) Execute(arg0, arg1, arg2, arg3 interface{}, arg4 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2, arg3}, arg4...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockCommand)(nil).Execute), varargs...)
}

// Output mocks base method.
func (m *MockCommand) Output(dir, program string, args ...string) (string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{dir, program}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Output", varargs...)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Output indicates an expected call of Output.
func (mr *MockCommandMockRecorder) Output(dir, program interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{dir, program}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Output", reflect.TypeOf((*MockCommand)(nil).Output), varargs...)
}

// MockManagePyFinder is a mock of ManagePyFinder interface.
type MockManagePyFinder struct {
	ctrl     *gomock.Controller
	recorder *MockManagePyFinderMockRecorder
}

// MockManagePyFinderMockRecorder is the mock recorder for MockManagePyFinder.
type MockManagePyFinderMockRecorder struct {
	mock *MockManagePyFinder
}

// NewMockManagePyFinder creates a new mock instance.
func NewMockManagePyFinder(ctrl *gomock.Controller) *MockManagePyFinder {
	mock := &MockManagePyFinder{ctrl: ctrl}
	mock.recorder = &MockManagePyFinderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManagePyFinder) EXPECT() *MockManagePyFinderMockRecorder {
	return m.recorder
}

// FindManagePy mocks base method.
func (m *MockManagePyFinder) FindManagePy(dir string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindManagePy", dir)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindManagePy indicates an expected call of FindManagePy.
func (mr *MockManagePyFinderMockRecorder) FindManagePy(dir interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindManagePy", reflect.TypeOf((*MockManagePyFinder)(nil).FindManagePy), dir)
}

// MockReqs is a mock of Reqs interface.
type MockReqs struct {
	ctrl     *gomock.Controller
	recorder *MockReqsMockRecorder
}

// MockReqsMockRecorder is the mock recorder for MockReqs.
type MockReqsMockRecorder struct {
	mock *MockReqs
}

// NewMockReqs creates a new mock instance.
func NewMockReqs(ctrl *gomock.Controller) *MockReqs {
	mock := &MockReqs{ctrl: ctrl}
	mock.recorder = &MockReqsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReqs) EXPECT() *MockReqsMockRecorder {
	return m.recorder
}

// FindAnyPackage mocks base method.
func (m *MockReqs) FindAnyPackage(buildDir string, searchedPackages ...string) (bool, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{buildDir}
	for _, a := range searchedPackages {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindAnyPackage", varargs...)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAnyPackage indicates an expected call of FindAnyPackage.
func (mr *MockReqsMockRecorder) FindAnyPackage(buildDir interface{}, searchedPackages ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{buildDir}, searchedPackages...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAnyPackage", reflect.TypeOf((*MockReqs)(nil).FindAnyPackage), varargs...)
}

// FindStalePackages mocks base method.
func (m *MockReqs) FindStalePackages(oldRequirementsPath, newRequirementsPath string, excludedPackages ...string) ([]string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{oldRequirementsPath, newRequirementsPath}
	for _, a := range excludedPackages {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindStalePackages", varargs...)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindStalePackages indicates an expected call of FindStalePackages.
func (mr *MockReqsMockRecorder) FindStalePackages(oldRequirementsPath, newRequirementsPath interface{}, excludedPackages ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{oldRequirementsPath, newRequirementsPath}, excludedPackages...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindStalePackages", reflect.TypeOf((*MockReqs)(nil).FindStalePackages), varargs...)
}
