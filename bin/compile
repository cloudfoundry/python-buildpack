#!/usr/bin/env bash

# The Cloud Foundry Python Buildpack. This script accepts parameters for a build
# directory, a cache directory, and a directory for app environment variables.

# Usage:
#
#     $ bin/compile <build-dir> <cache-dir> <env-path>

# Fail fast and fail hard.
set -eo pipefail

[ "$BUILDPACK_XTRACE" ] && set -o xtrace

# Prepend proper path for virtualenv hackery. This will be deprecated soon.
export PATH=:/usr/local/bin:$PATH

# Paths.
BIN_DIR=$(cd $(dirname $0); pwd) # absolute path
ROOT_DIR=$(dirname $BIN_DIR)
BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3

$ROOT_DIR/compile-extensions/bin/check_buildpack_version $ROOT_DIR $CACHE_DIR

# Cloud Foundry does not have support for Logplex.
function bpwatch() {
  :
}

# Use miniconda if environment.yml exists and exit
if [ -f $BUILD_DIR/environment.yml ]; then
  echo "----------------- USING CONDA BUILDPACK -----------------"

  # Syntax sugar.
  source $BIN_DIR/utils

  # We'll need to send these statics to other scripts we `source`.
  export BUILD_DIR
  
  # Switch to the repo's context.
  cd $BUILD_DIR
  
  # Experimental pre_compile hook.
  bpwatch start pre_compile
    source $BIN_DIR/steps/hooks/pre_compile
  bpwatch stop pre_compile
  
  $BIN_DIR/steps/conda-install $BUILD_DIR $CACHE_DIR
  $ROOT_DIR/compile-extensions/bin/store_buildpack_metadata $ROOT_DIR $CACHE_DIR
  
  # Experimental post_compile hook.
  bpwatch start post_compile
    source $BIN_DIR/steps/hooks/post_compile
  bpwatch stop post_compile

  exit 0
fi

$ROOT_DIR/compile-extensions/bin/check_stack_support

# The ROOT_DIR is read only so we can't install dependencies in it
# Move the ROOT_DIR contents to tmp and point ROOT_DIR to the new root
TMP_ROOT=/tmp/buildpack
rm -rf $TMP_ROOT
cp -r $ROOT_DIR $TMP_ROOT
ROOT_DIR=$TMP_ROOT
cd $ROOT_DIR

# CF Common
BUILDPACK_PATH="$( cd "$( dirname "${BASH_SOURCE[0]}" )"/.. && pwd )"
export BUILDPACK_PATH
source $BUILDPACK_PATH/compile-extensions/lib/common
# END CF Common

# Static configurations for virtualenv caches.
VIRTUALENV_LOC=".cloudfoundry/venv"
LEGACY_TRIGGER="lib/python2.7"

DEFAULT_PYTHON_VERSION="python-$($BUILDPACK_PATH/compile-extensions/bin/default_version_for $BUILDPACK_PATH/manifest.yml python)"
PYTHON_EXE="/app/.cloudfoundry/python/bin/python"
PIP_VERSION="9.0.1"
SETUPTOOLS_VERSION="32.1.0"

# Common Problem Warnings
export WARNINGS_LOG=$(mktemp)
export RECOMMENDED_PYTHON_VERSION=$DEFAULT_PYTHON_VERSION

# Setup bpwatch
export PATH=$PATH:$ROOT_DIR/vendor/bpwatch
LOGPLEX_KEY="t.b90d9d29-5388-4908-9737-b4576af1d4ce"
export BPWATCH_STORE_PATH=$CACHE_DIR/bpwatch.json
BUILDPACK_VERSION=v28

# Setup pip-pop (pip-diff)
export PATH=$PATH:$ROOT_DIR/vendor/pip-pop

# Support Anvil Build_IDs
[ ! "$SLUG_ID" ] && SLUG_ID="defaultslug"
[ ! "$REQUEST_ID" ] && REQUEST_ID=$SLUG_ID
[ ! "$STACK" ] && STACK=$DEFAULT_PYTHON_STACK

# Sanitizing environment variables.
unset GIT_DIR PYTHONHOME PYTHONPATH
unset RECEIVE_DATA RUN_KEY BUILD_INFO DEPLOY LOG_TOKEN DYNO
unset CYTOKINE_LOG_FILE GEM_PATH

# Setup buildpack instrumentation.
bpwatch init $LOGPLEX_KEY
bpwatch build python $BUILDPACK_VERSION $REQUEST_ID

bpwatch start compile

# Syntax sugar.
source $BIN_DIR/utils

# Import collection of warnings.
source $BIN_DIR/warnings

# we need to put a bunch of symlinks in there later
mkdir -p /app/.cloudfoundry

# Set up outputs under new context
PROFILE_PATH="$BUILD_DIR/.profile.d/python.sh"
EXPORT_PATH="$BIN_DIR/../export"
GUNICORN_PROFILE_PATH="$BUILD_DIR/.profile.d/python.gunicorn.sh"

# We'll need to send these statics to other scripts we `source`.
export BUILD_DIR CACHE_DIR BIN_DIR PROFILE_PATH EXPORT_PATH

# Prepend proper environment variables for Python use.
export PATH=/app/.cloudfoundry/python/bin:/app/.cloudfoundry/vendor/bin:$PATH
export PYTHONUNBUFFERED=1
export LANG=en_US.UTF-8
export C_INCLUDE_PATH=/app/.cloudfoundry/vendor/include:/app/.cloudfoundry/python/include:$C_INCLUDE_PATH
export CPLUS_INCLUDE_PATH=/app/.cloudfoundry/vendor/include:/app/.cloudfoundry/python/include:$CPLUS_INCLUDE_PATH
export LIBRARY_PATH=/app/.cloudfoundry/vendor/lib:/app/.cloudfoundry/python/lib:$LIBRARY_PATH
export LD_LIBRARY_PATH=/app/.cloudfoundry/vendor/lib:/app/.cloudfoundry/python/lib:$LD_LIBRARY_PATH
export PKG_CONFIG_PATH=/app/.cloudfoundry/vendor/lib/pkg-config:/app/.cloudfoundry/python/lib/pkg-config:$PKG_CONFIG_PATH

# Switch to the repo's context.
cd $BUILD_DIR

# Warn for lack of Procfile.
if [[ ! -f Procfile ]]; then
  puts-warn 'Warning: Your application is missing a Procfile. This file tells Cloud Foundry how to run your application.'
  puts-warn 'Learn more: https://docs.cloudfoundry.org/buildpacks/prod-server.html#procfile'
fi

# Experimental pre_compile hook.
bpwatch start pre_compile
  source $BIN_DIR/steps/hooks/pre_compile
bpwatch stop pre_compile

# If no requirements.txt file given, assume `setup.py develop` is intended.
if [ ! -f requirements.txt ]; then
  echo "-e ." > requirements.txt
fi


# Sticky runtimes.
if [ -f $CACHE_DIR/.cloudfoundry/python-version ]; then
  DEFAULT_PYTHON_VERSION=$(cat $CACHE_DIR/.cloudfoundry/python-version)
fi

# Stack fallback for non-declared caches.
if [ -f $CACHE_DIR/.cloudfoundry/python-stack ]; then
  CACHED_PYTHON_STACK=$(cat $CACHE_DIR/.cloudfoundry/python-stack)
else
  CACHED_PYTHON_STACK=$STACK
fi

# If no runtime given, assume default version.
if [ ! -f runtime.txt ]; then
  echo $DEFAULT_PYTHON_VERSION > runtime.txt
fi

# Prepare the cache.
mkdir -p $CACHE_DIR

# Purge "old-style" virtualenvs.
bpwatch start clear_old_venvs
  [ -d $CACHE_DIR/$LEGACY_TRIGGER ] && rm -fr $CACHE_DIR/.cloudfoundry/bin $CACHE_DIR/.cloudfoundry/lib $CACHE_DIR/.cloudfoundry/include
  [ -d $CACHE_DIR/$VIRTUALENV_LOC ] && rm -fr $CACHE_DIR/.cloudfoundry/venv $CACHE_DIR/.cloudfoundry/src
bpwatch stop clear_old_venvs

# Restore old artifacts from the cache.
bpwatch start restore_cache
    mkdir -p .cloudfoundry

    cp -R $CACHE_DIR/.cloudfoundry/python .cloudfoundry/ &> /dev/null || true
    cp -R $CACHE_DIR/.cloudfoundry/python-stack .cloudfoundry/ &> /dev/null || true
    cp -R $CACHE_DIR/.cloudfoundry/python-version .cloudfoundry/ &> /dev/null || true
    cp -R $CACHE_DIR/.cloudfoundry/vendor .cloudfoundry/ &> /dev/null || true
    cp -R $CACHE_DIR/.cloudfoundry/venv .cloudfoundry/ &> /dev/null || true
    if [[ -d $CACHE_DIR/.cloudfoundry/src ]]; then
      cp -R $CACHE_DIR/.cloudfoundry/src .cloudfoundry/ &> /dev/null || true
    fi

bpwatch stop restore_cache

mkdir -p $(dirname $PROFILE_PATH)
mkdir -p /app/.cloudfoundry/src

if [[ $BUILD_DIR != '/app' ]]; then
    # python expects to reside in /app, so set up symlinks
    # we will not remove these later so subsequent buildpacks can still invoke it
    ln -nsf $BUILD_DIR/.cloudfoundry/python /app/.cloudfoundry/python
    ln -nsf $BUILD_DIR/.cloudfoundry/vendor /app/.cloudfoundry/vendor
    ln -nsf $BUILD_DIR/.cloudfoundry/venv /app/.cloudfoundry/venv
    # Note: .cloudfoundry/src is copied in later.
fi

# Install Python.
source $BIN_DIR/steps/python

# Sanity check for setuptools/distribute.
source $BIN_DIR/steps/setuptools

# Uninstall removed dependencies with Pip.
source $BIN_DIR/steps/pip-uninstall

# Mercurial support.
source $BIN_DIR/steps/mercurial

# Pylibmc support.
source $BIN_DIR/steps/pylibmc

# Libffi support.
source $BIN_DIR/steps/cryptography

# Install dependencies with Pip (where the magic happens).
source $BIN_DIR/steps/pip-install

# Support for pip install -e.
rm -fr $BUILD_DIR/.cloudfoundry/src
deep-cp /app/.cloudfoundry/src $BUILD_DIR/.cloudfoundry/src

# Django collectstatic support.
sub-env $BIN_DIR/steps/collectstatic

# Create .profile script for application runtime environment variables.
set-env PATH '$HOME/.cloudfoundry/python/bin:$PATH'
set-env PYTHONUNBUFFERED true
set-env PYTHONHOME /app/.cloudfoundry/python
set-env LIBRARY_PATH '/app/.cloudfoundry/vendor/lib:/app/.cloudfoundry/python/lib:$LIBRARY_PATH'
set-env LD_LIBRARY_PATH '/app/.cloudfoundry/vendor/lib:/app/.cloudfoundry/python/lib:$LD_LIBRARY_PATH'
set-default-env LANG en_US.UTF-8
set-default-env PYTHONHASHSEED random
set-default-env PYTHONPATH /app/

# Install sane-default script for $WEB_CONCURRENCY and $FORWARDED_ALLOW_IPS.
cp $ROOT_DIR/vendor/python.gunicorn.sh $GUNICORN_PROFILE_PATH

# Experimental post_compile hook.
bpwatch start post_compile
  source $BIN_DIR/steps/hooks/post_compile
bpwatch stop post_compile

set +e
# rewrite build dir in egg links to /app so things are found at runtime
find .cloudfoundry/python/lib/python*/site-packages/ -name "*.pth" -print0 2> /dev/null | xargs -r -0 -n 1 sed -i -e "s#$(pwd)#/app#" &> /dev/null
set -e

set +e
# Support for PyPy
find .cloudfoundry/python/lib-python/*/site-packages/  -name "*.pth" -print0 2> /dev/null | xargs -r -0 -n 1 sed -i -e "s#$(pwd)#/app#" &> /dev/null
set -e

# Store new artifacts in cache.
bpwatch start dump_cache

  rm -rf $CACHE_DIR/.cloudfoundry/python
  rm -rf $CACHE_DIR/.cloudfoundry/python-version
  rm -rf $CACHE_DIR/.cloudfoundry/python-stack
  rm -rf $CACHE_DIR/.cloudfoundry/vendor
  rm -rf $CACHE_DIR/.cloudfoundry/venv
  rm -rf $CACHE_DIR/.cloudfoundry/src

  mkdir -p $CACHE_DIR/.cloudfoundry
  cp -R .cloudfoundry/python $CACHE_DIR/.cloudfoundry/
  cp -R .cloudfoundry/python-version $CACHE_DIR/.cloudfoundry/
  cp -R .cloudfoundry/python-stack $CACHE_DIR/.cloudfoundry/ &> /dev/null || true
  cp -R .cloudfoundry/vendor $CACHE_DIR/.cloudfoundry/ &> /dev/null || true
  cp -R .cloudfoundry/venv $CACHE_DIR/.cloudfoundry/ &> /dev/null || true
  if [[ -d .cloudfoundry/src ]]; then
    cp -R .cloudfoundry/src $CACHE_DIR/.cloudfoundry/ &> /dev/null || true
  fi

bpwatch stop dump_cache

# Fin.
$ROOT_DIR/compile-extensions/bin/store_buildpack_metadata $ROOT_DIR $CACHE_DIR
bpwatch stop compile
